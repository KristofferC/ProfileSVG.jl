var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference-1","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"@profview\nProfileSVG.view\nProfileSVG.save","category":"page"},{"location":"reference/#ProfileSVG.@profview","page":"Reference","title":"ProfileSVG.@profview","text":"@profview f(args...)\n\nClear the Profile buffer, profile f(args...), and view the result graphically.\n\n\n\n\n\n","category":"macro"},{"location":"reference/#ProfileSVG.view","page":"Reference","title":"ProfileSVG.view","text":"ProfileSVG.view([fcolor], data=Profile.fetch(); fontsize=12, kwargs...)\n\nView profiling results. See FlameGraphs for options for kwargs and the default value of fcolor.\n\n\n\n\n\n","category":"function"},{"location":"reference/#ProfileSVG.save","page":"Reference","title":"ProfileSVG.save","text":"ProfileSVG.save([fcolor], io, g=flamegraph(); kwargs...)\n\nSave profile results as an SVG file. See FlameGraphs for options for kwargs and the default value of fcolor.\n\n\n\n\n\n","category":"function"},{"location":"coloration-schemes/#Coloration-Schemes-1","page":"Coloration Schemes","title":"Coloration Schemes","text":"","category":"section"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"The output color of ProfileSVG can be customized with the functions provided by the FlameGraphs package. See the FlameGraphs docmentation for details.","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"using Profile, ProfileSVG # hide\ninclude(joinpath(\"assets\", \"profile_test.jl\"))\nProfile.clear()\n@profile (x -> log(x) * exp(x)).(fill(1.23, 10, 10))","category":"page"},{"location":"coloration-schemes/#Default-scheme-1","page":"Coloration Schemes","title":"Default scheme","text":"","category":"section"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"ProfileSVG.view()\nnothing # hide","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"or","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"using FlameGraphs\nProfileSVG.view(FlameColors())\nProfileSVG.view(FlameColors(), backtraces, lidict=lidict) # hide","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"The default scheme uses cycling colors to distinguish different stack frames, while coloring runtime dispatch \"red\" and garbage-collection \"orange\". The run-time dispatch (aka, dynamic dispatch, run-time method lookup, or a virtual call) often has a significant impact on performance.","category":"page"},{"location":"coloration-schemes/#Stack-frame-category-1","page":"Coloration Schemes","title":"Stack frame category","text":"","category":"section"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"You can colorize the stack frames based on their category, or module-of-origin.","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"using FlameGraphs\nProfileSVG.view(StackFrameCategory())\nProfileSVG.view(StackFrameCategory(), backtraces, lidict=lidict) # hide","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"In the default StackFrameCategory scheme, \"gray\" indicates time spent in Core.Compiler (mostly inference), \"dark gray\" in other Core, \"yellow\" in LLVM, \"orange\" in other ccalls, \"light blue\" in Base, and \"red\" is uncategorized (mostly package code).","category":"page"},{"location":"coloration-schemes/#","page":"Coloration Schemes","title":"Coloration Schemes","text":"info: Info\nThe colorbg and colorfont options of FlameGraphs.FlameColors and FlameGraphs.StackFrameCategory are currently not supported and ignored.","category":"page"},{"location":"#ProfileSVG-1","page":"Introduction","title":"ProfileSVG","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"ProfileSVG allows you to export profiling data as an SVG file. It can be used to display profiling results in Jupyter/IJulia notebooks, Juno or any other SVG viewer.","category":"page"},{"location":"#Installation-1","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The package can be installed with the Julia package manager. Run:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"import Pkg\nPkg.add(\"ProfileSVG\")","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"or, from the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"pkg> add ProfileSVG","category":"page"},{"location":"#Usage-1","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"#Displaying-profiles-1","page":"Introduction","title":"Displaying profiles","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"using ProfileSVG\n@profview f(args...)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"where f(args...) is the operation you want to profile.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"For example:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"function profile_test(n)\n    for i = 1:n\n        A = randn(100,100,20)\n        m = maximum(A)\n        Am = mapslices(sum, A; dims=2)\n        B = A[:,:,5]\n        Bsort = mapslices(sort, B; dims=1)\n        b = rand(100)\n        C = B.*b\n    end\nend\n\nprofile_test(1)   # run once to compile\n\nusing Profile, ProfileSVG\n\n@profview profile_test(10)\nnothing # hide","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Then, you can get something like this:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"include(joinpath(\"assets\", \"profile_test.jl\")) # hide\nProfileSVG.view(backtraces, lidict=lidict) # hide","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Note that collected profiles can vary from run-to-run, so don't be alarmed if you get something different.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"@profview f(args...) is just shorthand for","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Profile.clear()\n@profile f(args...)\nProfileSVG.view()","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"If you've already collected profiling data with @profile, or if you want to customize the output, you can call ProfileSVG.view directly.","category":"page"},{"location":"#Exporting-to-SVG-file-1","page":"Introduction","title":"Exporting to SVG file","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Even if you don't use graphical front-ends such as Jupyter, you might want to export a flame graph as an SVG file as a convenient way to share the results with others. The ProfileSVG.save function provides the exporting feature.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"using FlameGraphs # hide\nProfile.clear()\n@profile profile_test(10);\n\n# Save a graph that looks like the Jupyter example above\nProfileSVG.save(joinpath(\"assets\", \"prof.svg\"))\nProfileSVG.save(joinpath(\"assets\", \"prof.svg\"), flamegraph(backtraces, lidict=lidict)) # hide","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"(Image: Exported Profile) Note that the exported SVG files include the script for interactive features, but some viewers (browsers) do not support the script. In particular, when loading the SVG image from an HTML <img> element (as above), the interactive features are usually disabled.","category":"page"},{"location":"#Other-tools-for-displaying-profiles-1","page":"Introduction","title":"Other tools for displaying profiles","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"ProfileView, a graphical user interface (GUI) based on Gtk.\nProfileVega, a Vega-Lite front-end, which supports exporting profiling data as a Vega-Lite figure.\nJuno, a development environment, which supports profile visualization as an \"in-editor\" chart.","category":"page"}]
}
